---
import { splitTextIntoChunks } from "@src/utils/StringUtil";

interface Word {
    text: string;
    url: string;
}

interface Props {
    width: number;
    height: number;
    words: Word[];
}

const { width, height, words } = Astro.props;
const WORD_SPLIT_BY = "_";
const centerX = width / 2;
const centerY = height / 2;

const radii = Array.from(
    { length: 15 },
    (_, idx) => (0.25 + 0.05 * idx) * width,
);

const rings = splitTextIntoChunks(
    words
        .map((word) => ({ text: word.text, sort: Math.random() }))
        .sort((a, b) => a.sort - b.sort)
        .map(({ text }) => text)
        .join(WORD_SPLIT_BY)
        .trim(),
    radii.map((radius) => Math.floor((radius * 2 * Math.PI) / 12)),
);

const createPathD = (radius: number) => {
    return `M ${centerX}, ${centerY} m -${radius}, 0 a ${radius},${radius} 0 1,1 ${radius * 2},0 a ${radius},${radius} 0 1,1 -${radius * 2},0`;
};
---

<svg width={width} height={height} viewBox={`0 0 ${width} ${height}`}>
    {
        rings.map((ring, index) => {
            return (
                <g
                    class:list={[
                        {
                            "animate-[spin_180s_linear_infinite]": index === 0,
                        },
                        {
                            "animate-[spin_150s_linear_infinite]": index === 1,
                        },
                        {
                            "animate-[spin_270s_linear_infinite]": index === 2,
                        },
                        {
                            "animate-[spin_360s_linear_infinite]": index === 3,
                        },
                        {
                            "animate-[spin_210s_linear_infinite]": index === 4,
                        },
                        "origin-center hover:[animation-play-state:paused]",
                    ]}
                >
                    <path
                        id={`circlePath${index}`}
                        fill="none"
                        stroke="none"
                        d={createPathD(radii[index])}
                    />
                    <text>
                        <textPath href={`#circlePath${index}`}>
                            {ring.split(WORD_SPLIT_BY).map((word) => (
                                <a
                                    aria-label={word}
                                    class="transition-colors fill-current hover:fill-blue-700 dark:hover:fill-blue-400"
                                    href={
                                        words.find(
                                            (_word) => _word.text === word,
                                        )?.url
                                    }
                                >
                                    {word}{" "}
                                </a>
                            ))}
                        </textPath>
                    </text>
                </g>
            );
        })
    }
</svg>
